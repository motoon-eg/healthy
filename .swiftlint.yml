# By default, SwiftLint uses a set of sensible default rules you can adjust:
disabled_rules: # rule identifiers turned on by default to exclude from running
  - colon
  - comma
  - control_statement
  
  # TODOs and FIXMEs should be resolved.
  - todo
  
opt_in_rules: # some rules are turned off by default, so you need to opt-in
  - empty_count # Find all the available rules by running: `swiftlint rules`
  - force_cast
  - force_unwrapping
  
  # Header comments should be consistent with project patterns.
  - file_header
  
  # MARK comment should be in valid format. e.g. ‘// MARK: …’ or ‘// MARK: - …’
  - mark
  
  # Function parameters should be aligned vertically if they’re in multiple lines in a method call
  - vertical_parameter_alignment_on_call
  
# Alternatively, specify all rules explicitly by uncommenting this option:
# only_rules: # delete `disabled_rules` & `opt_in_rules` if using this
#   - empty_parameters
#   - vertical_whitespace

analyzer_rules: # Rules run by `swiftlint analyze`
  - explicit_self

excluded: # paths to ignore during linting. Takes precedence over `included`.
  - Carthage
  - Pods

# If true, SwiftLint will not fail if no lintable files are found.
allow_zero_lintable_files: false

# configurable rules can be customized from this configuration file
# binary rules can set their severity level
force_cast: warning # implicitly

force_unwrapping: error

force_try:
  severity: error # explicitly

# rules that have both warning and error levels, can set just the warning level
# implicitly
line_length: 100

# they can set both implicitly with an array
type_body_length:
  - 300 # warning
  - 400 # error

# or they can set both explicitly
file_length:
  error: 400
  
# naming rules can set warnings/errors for min_length and max_length
# additionally they can set excluded names
type_name:
  allowed_symbols: ["_"] # these are allowed in type names
  
identifier_name:
  excluded: # excluded via string array
    - id
    - URL
    - GlobalAPIKey

file_header:
  forbidden_string: "Created by"
